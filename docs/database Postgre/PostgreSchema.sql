-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS v1.admins
(
    id serial NOT NULL,
    email character varying COLLATE pg_catalog."default" NOT NULL,
    password character varying COLLATE pg_catalog."default" NOT NULL,
    last_login timestamp without time zone,
    is_active boolean NOT NULL DEFAULT true,
    CONSTRAINT admins_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS v1.course_rating
(
    students_id integer NOT NULL DEFAULT nextval('v1.students_courses_students_id_seq'::regclass),
    courses_id integer NOT NULL DEFAULT nextval('v1.students_courses_courses_id_seq'::regclass),
    rating integer NOT NULL,
    CONSTRAINT unique_student_course UNIQUE (students_id, courses_id)
);

CREATE TABLE IF NOT EXISTS v1.course_sections
(
    id serial NOT NULL,
    title character varying(50) COLLATE pg_catalog."default" NOT NULL,
    course_id integer NOT NULL,
    content character varying(1000) COLLATE pg_catalog."default" NOT NULL,
    description character varying(200) COLLATE pg_catalog."default" NOT NULL,
    is_hidden boolean NOT NULL DEFAULT false,
    CONSTRAINT course_sections_pkey PRIMARY KEY (id),
    CONSTRAINT section_title UNIQUE (title)
);

CREATE TABLE IF NOT EXISTS v1.courses
(
    id serial NOT NULL,
    title character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description character varying(150) COLLATE pg_catalog."default" NOT NULL,
    tags character varying(100) COLLATE pg_catalog."default" NOT NULL,
    picture_url character varying(255) COLLATE pg_catalog."default" NOT NULL,
    is_premium boolean NOT NULL,
    owner_id integer NOT NULL,
    is_hidden boolean NOT NULL DEFAULT false,
    created_on timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT courses_key PRIMARY KEY (id),
    CONSTRAINT course_title_key UNIQUE (title)
);

CREATE TABLE IF NOT EXISTS v1.enrollments
(
    id serial NOT NULL,
    student_id integer NOT NULL,
    course_id integer NOT NULL,
    is_approved boolean NOT NULL DEFAULT false,
    requested_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    approved_at timestamp with time zone,
    completed_at timestamp with time zone,
    drop_out boolean DEFAULT false,
    CONSTRAINT enrollments_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS v1.event_log
(
    id serial NOT NULL,
    user_id integer NOT NULL,
    description character varying(100) COLLATE pg_catalog."default" NOT NULL,
    "timestamp" time with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    event_type character varying(30) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT id PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS v1.external_resources
(
    id serial NOT NULL,
    course_section_id integer NOT NULL,
    url character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT external_resources_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS v1.students
(
    id serial NOT NULL,
    email character varying COLLATE pg_catalog."default" NOT NULL,
    password character varying COLLATE pg_catalog."default" NOT NULL,
    first_name character varying COLLATE pg_catalog."default",
    last_name character varying COLLATE pg_catalog."default",
    avatar_url character varying COLLATE pg_catalog."default",
    is_active boolean NOT NULL DEFAULT true,
    notifications boolean NOT NULL DEFAULT true,
    CONSTRAINT students_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS v1.students_course_sections
(
    students_id serial NOT NULL,
    course_sections_id serial NOT NULL,
    is_completed boolean DEFAULT false,
    CONSTRAINT unique_student_section UNIQUE (students_id, course_sections_id)
);

CREATE TABLE IF NOT EXISTS v1.subscriptions
(
    id serial NOT NULL,
    student_id integer NOT NULL,
    subscribed_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    expire_date date NOT NULL,
    is_active boolean NOT NULL DEFAULT true,
    CONSTRAINT subscriptions_pkey PRIMARY KEY (id),
    CONSTRAINT unique_student_subscription UNIQUE (student_id)
);

CREATE TABLE IF NOT EXISTS v1.teachers
(
    id serial NOT NULL,
    email character varying COLLATE pg_catalog."default" NOT NULL,
    password character varying COLLATE pg_catalog."default" NOT NULL,
    email_verified boolean NOT NULL DEFAULT false,
    mobile character varying(10) COLLATE pg_catalog."default" NOT NULL,
    linked_in_url character varying(100) COLLATE pg_catalog."default" NOT NULL,
    is_active boolean NOT NULL DEFAULT false,
    CONSTRAINT teachers_pkey PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS v1.course_rating
    ADD CONSTRAINT students_courses_courses_id_fkey FOREIGN KEY (courses_id)
    REFERENCES v1.courses (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS v1.course_rating
    ADD CONSTRAINT students_courses_students_id_fkey FOREIGN KEY (students_id)
    REFERENCES v1.students (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS v1.course_sections
    ADD CONSTRAINT course_id FOREIGN KEY (course_id)
    REFERENCES v1.courses (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS v1.course_sections
    ADD CONSTRAINT fk_course_id FOREIGN KEY (course_id)
    REFERENCES v1.courses (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS v1.courses
    ADD CONSTRAINT owner_id FOREIGN KEY (owner_id)
    REFERENCES v1.teachers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS v1.enrollments
    ADD CONSTRAINT course_id FOREIGN KEY (course_id)
    REFERENCES v1.courses (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS v1.enrollments
    ADD CONSTRAINT student_id FOREIGN KEY (student_id)
    REFERENCES v1.students (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS v1.external_resources
    ADD CONSTRAINT course_section_id FOREIGN KEY (course_section_id)
    REFERENCES v1.course_sections (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS v1.students_course_sections
    ADD CONSTRAINT students_course_sections_course_sections_id_fkey FOREIGN KEY (course_sections_id)
    REFERENCES v1.course_sections (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS v1.students_course_sections
    ADD CONSTRAINT students_course_sections_students_id_fkey FOREIGN KEY (students_id)
    REFERENCES v1.students (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS v1.subscriptions
    ADD CONSTRAINT student_id FOREIGN KEY (student_id)
    REFERENCES v1.students (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS unique_student_subscription
    ON v1.subscriptions(student_id);

END;